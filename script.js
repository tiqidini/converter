const inputValue = document.getElementById('input-value');
const inputUnit = document.getElementById('input-unit');
const convertBtn = document.getElementById('convert-btn');
const results = document.getElementById('results');

const units = ['dbm', 'w', 'mw', 'uw'];
const unitLabels = {
    'dbm': 'dBm',
    'w': '–í—Ç',
    'mw': '–º–í—Ç',
    'uw': '–º–∫–í—Ç'
};

function convertPower(value, fromUnit, toUnit) {
    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –≤–∞—Ç—Ç—ã
    let watts;
    switch (fromUnit) {
        case 'dbm':
            watts = math.pow(10, (value - 30) / 10);
            break;
        case 'w':
            watts = value;
            break;
        case 'mw':
            watts = value / 1000;
            break;
        case 'uw':
            watts = value / 1000000;
            break;
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ –≤–∞—Ç—Ç –≤ –Ω—É–∂–Ω—É—é –µ–¥–∏–Ω–∏—Ü—É
    switch (toUnit) {
        case 'dbm':
            return 10 * math.log10(watts * 1000);
        case 'w':
            return watts;
        case 'mw':
            return watts * 1000;
        case 'uw':
            return watts * 1000000;
    }
}

function formatResult(value) {
    return value.toLocaleString('uk-UA', { 
        minimumFractionDigits: 2, 
        maximumFractionDigits: 6 
    });
}

function animateValue(element, start, end, duration) {
    let startTimestamp = null;
    const step = (timestamp) => {
        if (!startTimestamp) startTimestamp = timestamp;
        const progress = Math.min((timestamp - startTimestamp) / duration, 1);
        const current = start + progress * (end - start);
        element.textContent = formatResult(current);
        if (progress < 1) {
            window.requestAnimationFrame(step);
        }
    };
    window.requestAnimationFrame(step);
}

function saveLastInput() {
    localStorage.setItem('lastValue', inputValue.value);
    localStorage.setItem('lastUnit', inputUnit.value);
}

function loadLastInput() {
    const lastValue = localStorage.getItem('lastValue');
    const lastUnit = localStorage.getItem('lastUnit');
    if (lastValue) inputValue.value = lastValue;
    if (lastUnit) inputUnit.value = lastUnit;
}

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
function copyToClipboard(text) {
    navigator.clipboard.writeText(text).then(() => {
        alert('–°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É!');
    }, (err) => {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è: ', err);
    });
}

// –í—ã–∑–æ–≤–∏—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
loadLastInput();

// –î–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
const themeToggle = document.createElement('button');
themeToggle.classList.add('theme-toggle');
themeToggle.innerHTML = 'üåô';
document.body.appendChild(themeToggle);

themeToggle.addEventListener('click', () => {
    document.body.classList.toggle('dark-theme');
    themeToggle.innerHTML = document.body.classList.contains('dark-theme') ? '‚òÄÔ∏è' : 'üåô';
});

convertBtn.addEventListener('click', () => {
    const value = parseFloat(inputValue.value);
    const fromUnit = inputUnit.value;

    if (isNaN(value)) {
        results.innerHTML = '<p>–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.</p>';
        return;
    }

    let resultHtml = '<h3>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏:</h3>';
    units.forEach(unit => {
        if (unit !== fromUnit) {
            const result = convertPower(value, fromUnit, unit);
            resultHtml += `
                <div class="result-item" onclick="copyToClipboard('${formatResult(result)} ${unitLabels[unit]}')">
                    <span class="unit">${unitLabels[unit]}:</span>
                    <span class="value" data-value="${result}">0</span>
                </div>
            `;
        }
    });

    results.innerHTML = resultHtml;

    // –ê–Ω–∏–º–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    document.querySelectorAll('.value').forEach(element => {
        const endValue = parseFloat(element.dataset.value);
        animateValue(element, 0, endValue, 1000);
    });
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
inputValue.addEventListener('input', () => {
    convertBtn.click();
    saveLastInput();
});
inputUnit.addEventListener('change', () => {
    convertBtn.click();
    saveLastInput();
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Service Worker
if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        navigator.serviceWorker.register('/converter/sw.js')
            .then(reg => console.log('Service Worker –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ'))
            .catch(err => console.log('–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó Service Worker:', err));
    });
}

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
function convertErrorDbToPercent(errorDb) {
    // –§–æ—Ä–º—É–ª–∞: –æ—à–∏–±–∫–∞_–ø—Ä–æ—Ü–µ–Ω—Ç = (10^(–æ—à–∏–±–∫–∞_–¥–ë/10) - 1) * 100
    return (Math.pow(10, errorDb / 10) - 1) * 100;
}

// –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫—É –≤ HTML
const errorDbInput = document.createElement('input');
errorDbInput.type = 'number';
errorDbInput.id = 'error-db-input';
errorDbInput.placeholder = '–ü–æ—Ö–∏–±–∫–∞ –≤ –¥–ë';

const errorConvertBtn = document.createElement('button');
errorConvertBtn.id = 'error-convert-btn';
errorConvertBtn.textContent = '–ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –ø–æ—Ö–∏–±–∫—É';

// –í—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
document.querySelector('.converter').insertAdjacentElement('afterend', errorDbInput);
errorDbInput.insertAdjacentElement('afterend', errorConvertBtn);

// –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏
errorConvertBtn.addEventListener('click', () => {
    const errorDb = parseFloat(errorDbInput.value);
    if (isNaN(errorDb)) {
        alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ—Ö–∏–±–∫–∏ –≤ –¥–ë.');
        return;
    }
    const errorPercent = convertErrorDbToPercent(errorDb);
    alert(`–ü–æ—Ö–∏–±–∫–∞ ${errorDb} –¥–ë –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î ${errorPercent.toFixed(2)}% —É –≤—ñ–¥–Ω–æ—Å–Ω–∏—Ö –æ–¥–∏–Ω–∏—Ü—è—Ö.`);
});
